# Makefile.linux - Linux-specific configuration
# =============================================================================
# Linux Platform Configuration
# =============================================================================

# Linux-specific paths and commands
EXE_EXT :=
ALEXTENSION_BASE := $(HOME)/.vscode-server/extensions
NULL_DEVICE := /dev/null

# =============================================================================
# JSON Parsing (using jq)
# =============================================================================

# Check if jq is available
JQ_AVAILABLE := $(shell command -v jq >/dev/null 2>&1 && echo "yes" || echo "no")

# JSON parsing command
ifeq ($(JQ_AVAILABLE),yes)
	JSON_PARSE_CMD = jq -r
else
	# Fallback using basic shell tools (less reliable)
	JSON_PARSE_CMD = grep -o '"$1"[[:space:]]*:[[:space:]]*"[^"]*"' | cut -d'"' -f4
endif

# Sanitize filename for Linux
SANITIZE_CMD = sed 's/[\\/:*?"<>|]//g'

# =============================================================================
# AL Extension Discovery
# =============================================================================

# Find AL extension path
AL_EXT_PATH := $(shell find "$(ALEXTENSION_BASE)" -maxdepth 1 -name "ms-dynamics-smb.al-*" -type d 2>$(NULL_DEVICE) | sort -V | tail -1)

# Find AL compiler
ALC_PATH := $(AL_EXT_PATH)/bin/linux/alc

# =============================================================================
# Analyzer Discovery
# =============================================================================

# Dynamically determine enabled analyzers from settings.json
SETTINGS_FILE := .vscode/settings.json

# ANSI color codes
COLOR_GREEN=\033[0;32m
COLOR_RED=\033[0;31m
COLOR_YELLOW=\033[1;33m
COLOR_RESET=\033[0m

# =============================================================================
# Platform-Specific Command Variables (no targets)
# =============================================================================

# Dependency check command
CHECK_DEPS_CMD = @bash -c ' \
	if [ ! -f "$(ALC_PATH)" ]; then \
		echo -e "$${COLOR_RED}✗ AL Compiler not found. Please ensure AL extension is installed in VS Code.$${COLOR_RESET}" >&2; \
		exit 1; \
	fi; \
	if [ "$(JQ_AVAILABLE)" = "no" ]; then \
		echo -e "$${COLOR_RED}✗ Dependency missing: jq is not installed.$${COLOR_RESET}" >&2; \
		echo -e "$${COLOR_YELLOW}Please run '"'make install'"' to install it.$${COLOR_RESET}" >&2; \
		exit 1; \
	fi; \
	if [ ! -x "$(ALC_PATH)" ]; then \
		chmod +x "$(ALC_PATH)"; \
	fi; \
	echo -e "$${COLOR_GREEN}✓ AL Compiler found: $(ALC_PATH)$${COLOR_RESET}"; \
	echo -e "$${COLOR_GREEN}✓ jq is installed.$${COLOR_RESET}"'

PROJECT_ROOT := $(CURDIR)
APP_JSON := $(PROJECT_ROOT)/app.json
APP_NAME := $(shell jq -r '.name' $(APP_JSON))
APP_VERSION := $(shell jq -r '.version' $(APP_JSON))
PUBLISHER := $(shell jq -r '.publisher' $(APP_JSON))
SAFE_APP_NAME := $(shell echo $(APP_NAME) | sed 's/[\\/:*?"<>|]//g')
OUTPUT_FILE := $(PUBLISHER)_$(SAFE_APP_NAME)_$(APP_VERSION).app
OUTPUT_PATH := $(PROJECT_ROOT)/$(OUTPUT_FILE)
PACKAGE_CACHE := $(PROJECT_ROOT)/.alpackages

# Build argument string

# Main build command (dynamic analyzer logic)
BUILD_CMD = @bash -c ' \
	echo -e "$${COLOR_GREEN}Building $(APP_NAME) v$(APP_VERSION)...$${COLOR_RESET}"; \
	analyzer_args=""; \
	analyzer_list=""; \
	if [ -f $(SETTINGS_FILE) ]; then \
		enabled=$$(jq -r '"'"'.["al.codeAnalyzers"] // ["$${CodeCop}","$${UICop}"] | map(gsub("\\$$\\{|\\}"; "")) | join(",")'"'"' $(SETTINGS_FILE) 2>/dev/null); \
		if [ -z "$$enabled" ] || [ "$$enabled" = "null" ]; then enabled="CodeCop,UICop"; fi; \
	else \
		enabled="CodeCop,UICop"; \
	fi; \
	for name in $$(echo $$enabled | tr "," " "); do \
		case "$$name" in \
			CodeCop) dll="Microsoft.Dynamics.Nav.CodeCop.dll";; \
			UICop) dll="Microsoft.Dynamics.Nav.UICop.dll";; \
			AppSourceCop) dll="Microsoft.Dynamics.Nav.AppSourceCop.dll";; \
			PerTenantExtensionCop) dll="Microsoft.Dynamics.Nav.PerTenantExtensionCop.dll";; \
			*) dll="";; \
		esac; \
		if [ -n "$$dll" ]; then \
			path=$$(find "$(AL_EXT_PATH)" -name "$$dll" -type f 2>/dev/null | head -1); \
			if [ -n "$$path" ]; then \
				analyzer_args="$$analyzer_args /analyzer:$$path"; \
				analyzer_list="$$analyzer_list$$name "; \
			fi; \
		fi; \
	done; \
	if [ -n "$$analyzer_list" ]; then \
		echo "Using analyzers from settings.json:"; \
		for analyzer in $$analyzer_list; do \
			echo "  - $$analyzer"; \
		done; \
		echo ""; \
	else \
		echo "No analyzers found or enabled in settings.json"; \
		echo ""; \
	fi; \
	"$(ALC_PATH)" /project:$(PROJECT_ROOT) /out:$(OUTPUT_PATH) /packagecachepath:$(PACKAGE_CACHE) $$analyzer_args; EXIT_CODE=$$?; \
	echo ""; \
	if [ $$EXIT_CODE -ne 0 ]; then \
		echo -e "$${COLOR_RED}Build failed with errors above.$${COLOR_RESET}" >&2; \
		exit $$EXIT_CODE; \
	else \
		echo -e "$${COLOR_GREEN}✓ Build completed successfully: $(OUTPUT_FILE)$${COLOR_RESET}"; \
	fi'

# Clean command
CLEAN_CMD = @bash -c ' \
	rm -f "$(OUTPUT_PATH)"; \
	if [ -f "$(OUTPUT_PATH)" ]; then \
		echo -e "$${COLOR_GREEN}✓ Removed: $(OUTPUT_FILE)$${COLOR_RESET}"; \
	else \
		echo -e "$${COLOR_YELLOW}Nothing to clean$${COLOR_RESET}"; \
	fi'

# Install command
INSTALL_CMD = @bash -c ' \
	echo -e "$${COLOR_GREEN}Checking Linux dependencies...$${COLOR_RESET}"; \
	echo "Shell: $$SHELL"; \
	echo "Bash version: $$BASH_VERSION"; \
	if ! command -v jq >/dev/null 2>&1; then \
		echo -e "$${COLOR_YELLOW}Installing jq...$${COLOR_RESET}"; \
		if command -v apt-get >/dev/null 2>&1; then \
			sudo apt-get update && sudo apt-get install -y jq; \
		elif command -v yum >/dev/null 2>&1; then \
			sudo yum install -y jq; \
		elif command -v dnf >/dev/null 2>&1; then \
			sudo dnf install -y jq; \
		elif command -v pacman >/dev/null 2>&1; then \
			sudo pacman -S jq; \
		else \
			echo -e "$${COLOR_RED}Please install jq manually for your distribution$${COLOR_RESET}"; \
			exit 1; \
		fi; \
	else \
		echo -e "$${COLOR_GREEN}✓ jq is already installed$${COLOR_RESET}"; \
	fi; \
	echo -e "$${COLOR_GREEN}✓ Linux dependencies are ready$${COLOR_RESET}"'



SHOW_ANALYZERS_CMD = @bash -c ' \
	echo "Settings file: $(SETTINGS_FILE)"; \
	if [ -f $(SETTINGS_FILE) ]; then \
		enabled=$$(jq -r '"'"'.["al.codeAnalyzers"] | map(gsub("\\$$\\{|\\}"; "")) | join(",")'"'"' $(SETTINGS_FILE) 2>/dev/null); \
		if [ -z "$$enabled" ] || [ "$$enabled" = "null" ]; then enabled="CodeCop,UICop"; fi; \
	else \
		enabled="CodeCop,UICop"; \
	fi; \
	echo "Enabled analyzers from settings: $$enabled"; \
	echo ""; \
	if [ -d "$(AL_EXT_PATH)" ]; then \
		echo -e "$${COLOR_GREEN}AL Extension found: $(AL_EXT_PATH)$${COLOR_RESET}"; \
		analyzers="Microsoft.Dynamics.Nav.CodeCop.dll Microsoft.Dynamics.Nav.UICop.dll Microsoft.Dynamics.Nav.AppSourceCop.dll Microsoft.Dynamics.Nav.PerTenantExtensionCop.dll"; \
		found_any=0; \
		for dll in $$analyzers; do \
			analyzer_path=$$(find "$(AL_EXT_PATH)" -name "$$dll" -type f 2>/dev/null | head -1); \
			if [ -n "$$analyzer_path" ]; then \
				echo -e "$${COLOR_GREEN}✓ Found analyzer: $$analyzer_path$${COLOR_RESET}"; \
				found_any=1; \
			else \
				echo -e "$${COLOR_YELLOW}✗ Missing analyzer: $$dll$${COLOR_RESET}"; \
			fi; \
		done; \
		if [ $$found_any -eq 0 ]; then \
			echo -e "$${COLOR_YELLOW}No analyzers found in AL extension$${COLOR_RESET}"; \
		fi; \
	else \
		echo -e "$${COLOR_RED}✗ AL Extension not found at: $(AL_EXT_PATH)$${COLOR_RESET}"; \
	fi'
SHOW_CONFIG_CMD = @bash -c ' \
	if [ -f "$(ALC_PATH)" ]; then \
		echo -e "$${COLOR_GREEN}✓ AL Compiler: $(ALC_PATH)$${COLOR_RESET}"; \
	else \
		echo -e "$${COLOR_RED}✗ AL Compiler not found at: $(ALC_PATH)$${COLOR_RESET}"; \
	fi; \
	echo "Settings File: $(SETTINGS_FILE)"; \
	if [ -f $(SETTINGS_FILE) ]; then \
		enabled=$$(jq -r '"'"'.["al.codeAnalyzers"] // ["$${CodeCop}","$${UICop}"] | map(gsub("\\$$\\{|\\}"; "")) | join(",")'"'"' $(SETTINGS_FILE) 2>/dev/null); \
		if [ -z "$$enabled" ] || [ "$$enabled" = "null" ]; then enabled="CodeCop,UICop"; fi; \
	else \
		enabled="CodeCop,UICop"; \
	fi; \
	echo "Enabled Analyzers: $$enabled"; \
	echo ""; \
	echo "Analyzer Paths:"; \
	analyzer_count=0; \
	for name in $$(echo $$enabled | tr "," " "); do \
		dll=""; \
		case "$$name" in \
			CodeCop) dll="Microsoft.Dynamics.Nav.CodeCop.dll";; \
			UICop) dll="Microsoft.Dynamics.Nav.UICop.dll";; \
			AppSourceCop) dll="Microsoft.Dynamics.Nav.AppSourceCop.dll";; \
			PerTenantExtensionCop) dll="Microsoft.Dynamics.Nav.PerTenantExtensionCop.dll";; \
		esac; \
		if [ -n "$$dll" ]; then \
			analyzer_path=$$(find "$(AL_EXT_PATH)" -name "$$dll" -type f 2>/dev/null | head -1); \
			if [ -n "$$analyzer_path" ]; then \
				name_short=$$(basename $$analyzer_path | sed "s/Microsoft\.Dynamics\.Nav\.//;s/\.dll//"); \
				echo "  - $$name_short: $$analyzer_path"; \
				analyzer_count=$$((analyzer_count+1)); \
			fi; \
		fi; \
	done; \
	if [ $$analyzer_count -eq 0 ]; then \
		echo "  (No analyzers configured or found)"; \
	fi'
